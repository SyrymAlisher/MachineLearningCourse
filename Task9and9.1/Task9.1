{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task9** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "def solution(N):\n",
    "    binarized = bin(N)[2:]\n",
    "    count = 0\n",
    "    arr = []\n",
    "    for i in binarized:\n",
    "        if i=='1' and count>=1:\n",
    "            arr.append(count)\n",
    "            count=0\n",
    "        else:\n",
    "            count+=1\n",
    "    if arr:\n",
    "        mx = max(arr)-1\n",
    "        return mx\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "print(solution(20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task9.1**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "№1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def solution(A):\n",
    "    cnt = 0 \n",
    "    for i in range(len(A)):\n",
    "        begin = i + A[i]\n",
    "        for j in range(i+1, len(A)):\n",
    "            if begin >= j-A[j]:\n",
    "                cnt +=1\n",
    "    return cnt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solution([1,5,2,1,4,0]) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "№2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def solution(A):\n",
    "    uniques = {}\n",
    "    for i in A:\n",
    "        if i not in uniques:\n",
    "            uniques[i] = 1\n",
    "        else:\n",
    "            uniques[i] += 1\n",
    "    for key, value in uniques.items():\n",
    "        if value%2 != 0 :\n",
    "            return key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solution([9, 3, 9, 3, 9, 7, 9])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "№3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def solution(size, direction):\n",
    "    lenght = len(size)\n",
    "    cnt = 0\n",
    "    down_idx, up_idx = 0, 1\n",
    "    while True:\n",
    "        if down_idx == len(size)-1:\n",
    "            break\n",
    "        elif direction[down_idx] == 0 or direction[up_idx] == 1:\n",
    "            down_idx += 1\n",
    "            up_idx +=1\n",
    "        else:\n",
    "            if size[down_idx] > size[up_idx]:\n",
    "                del size[up_idx], direction[up_idx]\n",
    "            else:\n",
    "                del size[down_idx], direction[down_idx]\n",
    "                if down_idx != 0:\n",
    "                    up_idx -= 1\n",
    "                    down_idx -= 1\n",
    "            cnt+=1\n",
    "                \n",
    "    return lenght - cnt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solution([4, 3, 2, 1, 5, 10, 4, 6], [0, 1, 0, 1, 0, 0, 1, 0])\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
